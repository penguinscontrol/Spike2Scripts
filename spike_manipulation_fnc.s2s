var samps% := 32; 'how many samples per waveform?
var wcnt%; 'Count waveforms
var wvmrkch% := 3; 'wavemark channel identifier

func countwaves(ch%) 'counts the waves in a wavemark
var t:= -1, n:=0;
if ChanKind(ch%) = 6 then 'if ch% is a wavemark
repeat
        t := NextTime(ch%, t);
        if t <> -1 then n+=1 endif; 
        PrintLog("Found spike ", n, " at time ",t);
until t = -1;
else
    n := -1;
    PrintLog("Unsuitable Channel!");
    halt;
endif;    
return n;
end

proc getwaves(ch%,out[][]) 'saves the spike waveforms to out[][]
if ChanKind(ch%) = 6 then 'if ch% is a wavemark
    var t:= -1, n%, m%, code%[4], temp[samps%];
    for n% := 0 to (wcnt%-1) do
        t:= NextTime(ch%, t, code%, temp[]); 'save current spike to temp[]
        for m% := 0 to (samps%-1) do 'Save current spike (temp[]) to out[][]
            out[n%][m%] := temp[m%];
        next;
    next;
else
    PrintLog("Unsuitable Channel!");
    halt;
endif;

end

proc extractFeatMat(out[],in[][],opt%)
var n%, m%, temp[samps%];
    for n% := 0 to (wcnt%-1) do
        for m% := 0 to (samps%-1) do
        temp[m%] := in[n%][m%];
        next;
        docase
            case opt% = 1 then 'Extract Max
                out[n%] := temp[Max(temp[])];
            case opt% = 2 then 'Extract Min
                out[n%] := temp[Min(temp[])];
        endcase;    
    next;
end

proc extractFeatWave(ch%,out[],opt%);
if ChanKind(ch%) = 6 then 'if ch% is a wavemark
    var n%, t := NextTime(ch%, -1);
    var curv% := View();
    var wid := View(curv%).getWavemarkInfo(ch%,1);
    docase
    case opt% = 1 then;
        for n% := 0 to (wcnt%-1) do
            out[n%] := ChanMeasure(ch%,8,t,t+BinToX(wid-1));
            PrintLog("Amplitude of spike ", n%, " is ", out[n%], " at time ", t, "\n");
            t := NextTime(ch%, t);
        next;     
    endcase;       
else
    PrintLog("Unsuitable Channel!");
    halt;
endif;    
end

func getWavemarkInfo(ch%,opt%)
var start%, show%, pre%, out, SSHdl%;
if ChanKind(ch%) = 6 then 'if ch% is a wavemark
    ChanSelect(ch%,1);
    SSHdl% := SSOpen(1,0);
    docase
    case opt% = 1 then SSTempSizeGet(start%,show%,pre%); 'number of points in raw data display
        out := show%;
    endcase;       
else
    PrintLog("Unsuitable Channel!");
    halt;
endif;
return out;
end