load_file("nrngui.hoc")
load_proc("nrnmainmenu")

dt = 0.001
create soma
//v_init=-65

soma{
  nseg=1
  diam=1000
  L=1000
	insert hh
  }
  

objectvar stim1
soma stim1=new IClamp(0.5)
stim1.del = 5
stim1.dur = 0.2
stim1.amp = 2032

//Threshold was stim.amp = 1016

objectvar stim2
soma stim2=new LitClamp()
stim2.del = 5.2

// Threshold del was stim.del = 17.35
// Range of 12.35 ms 
stim2.dur = 0.2
stim2.amp = 0

/*
Our criterion for an action potential was having Vm
 cross zero after the current injection and having a definite
 peak in m;
*/
tstop=20

objref p, vsoma, cur1, cur2, i_sodium
p = new Graph()
p.size(0,tstop,-80,60)
vsoma = new Vector()
cur1 = new Vector()
cur2 = new Vector()
i_sodium = new Vector()

cur1.label("Current injection (nA)")
vsoma.label("Membrane Voltage (mV)")

vsoma.record(&soma.v(.5))
cur1.record(&stim1.i)
cur2.record(&stim2.i)

objref g, h, m
g = new Graph()
g.size(0,tstop,0,1)
h = new Vector()
m = new Vector()

h.record(&soma.h_hh(0.5))
m.record(&soma.m_hh(0.5))
i_sodium.record(&soma.ina(0.5))

h.label("H gating parameter")
m.label("M gating parameter")

run()

vsoma.plot(p,dt,1,1)
cur1.plot(p,dt,1,5)
cur2.plot(p,dt,1,5)

h.plot(g,dt,1,1)
m.plot(g,dt,1,5)

// Second question

beg = (stim1.del+0.2)/dt
end = tstop/dt
surf = (PI*soma.diam*soma.L)*10^(-8) //lateral surface of axon and convert microns^2 to cm^2
total_charge = -i_sodium.sum(beg,end)*surf*10^(-6)*dt // integrate current, convert mA to A from i_sodium and ms to s for dt
total_number = total_charge/(1.6021766*10^(-16)) // divide by charge of electron to get number of ions
total_moles = total_charge/(9.648*10^(4)) // divide by Faraday's constant to get number of moles of said ion
vol_ax = ((PI*soma.diam^2/4)*soma.L)*10^(-12) // axon volume
vol_out = PI/4-vol_ax // space volume
total_in0 = vol_ax*15e-6 // number of moles of ion intracellularly, initial
total_out0 = vol_out*140e-6 // number of moles of ion extracellularly, initial
total_in1 = (total_in0+total_moles)/vol_ax // new number of moles inside
total_out1 = (total_out0-total_moles)/vol_out // new number of moles outside
delta_in = total_moles*1e6/vol_ax // change in inside molarity
delta_out = total_moles*1e6/vol_out // change in outside molarity

F = 9.64853e4
R = 8.314
T = 310.15
E0 = R*T*log(140/15)/F // Nernst equation before
E1 = R*T*log((140-delta_out)/(15+delta_in))/F // Nernst equation after