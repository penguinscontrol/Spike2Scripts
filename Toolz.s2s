#include "tool_fun.s2s"

toolz();   'Try it out
Halt;

Func toolz()    'Set your own name...
timevw% := View();
ToolbarClear();     'Remove any old buttons
ToolbarSet(0, "", idlefun%);   'Idle routine
ToolbarSet(1, "Quit",quit%);
ToolbarSet(3, "Move Displaced",movedist%);
ToolbarSet(4, "&PredictPCA", PredictPCA%);   'Link to function
ToolbarSet(6, "Collision Detection",coldetect%);
ToolbarSet(7, "INTH",saveINTH%);
ToolbarSet(8, "SNR",snrfromfile%);
ToolbarSet(9, "Waveform",waveavg2%);
ToolbarSet(11, "3D",wave3D%);
ToolbarSet(12, "Add to PyEl", add2pyel%);
ToolbarSet(13, "REXDataGUI",gotogui%);
ToolbarSet(14, "ToREXDataGUI",torex%);
ToolbarSet(16, "Get Triggers",gettrigs%);
ToolbarSet(18, "Feats2Mat",savefeats%);
ToolbarSet(19, "VTr2Mat", vtrtogui%);
ToolbarSet(20, "CombineWvMrk",combinewvm%);
return Toolbar("Things you can do", 511);
end;

func combinewvm%()
var ok%,ch1%,ch2%,vch1%,vch2%,memch%,samps1%,samps2%,pre1%,pre2%;
DlgCreate("Combine Wavemarks");
DlgChan(1,"Please indicate first WaveMark:",131088);
DlgChan(2,"Please indicate first voltage trace:",513);
DlgChan(3,"Please indicate second WaveMark:",131088);
DlgChan(4,"Please indicate second voltage trace",513);
DlgButton(0,"Cancel");
DlgButton(1,"OK");
ok% := DlgShow(ch1%,vch1%,ch2%,vch2%);
View(timevw%);
samps1% := MarkInfo(ch1%,pre1%);
samps2% := MarkInfo(ch2%,pre2%);

var offset%;
if samps1% <> samps2% then
    if samps2% > samps1% then
        samps1% := samps2%;
    endif;
    Message("WARNING: Number of samples inconsistent. Using larger.");
endif;
if pre1% <> pre2% then
    offset% := pre1%-pre2%;
    Message("WARNING: Number of pre-trigger points inconsistent. Realigning.");
endif;

if BinSize(ch1%) <> BinSize(ch2%) then
    Message("WARNING: Bin sizes inconsistent. Unable to merge.");
    return 0;
endif;

memch% := MemChan(6,samps1%,BinSize(ch1%),pre1%);
wvm2mem(ch1%,vch1%,memch%,samps1%,0);
wvm2mem(ch2%,vch2%,memch%,samps1%,offset%);
ChanShow(memch%);

return 1

end;

proc wvm2mem(wvm%,vtr%,memch%,samp%,offset%)
var i%,code%[4],wvfrm[samp%];
var t := -1;
var toffset := View(timevw%).BinSize(vtr%)*offset%;
repeat
    t := NextTime(wvm%,t,code%[],wvfrm[]);
    View(timevw%).ChanData(vtr%,wvfrm[],t-toffset,MaxTime());
    MemSetItem(memch%,0,t-toffset,code%[],wvfrm[]);        
until t = -1;
end;