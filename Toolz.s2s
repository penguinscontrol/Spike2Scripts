#include "spike_manipulation_fnc.s2s"
#include "noise_estimate_fcn.s2s"

var timevw%, tempinthvw%, myinthvw%;

toolz();   'Try it out
Halt;

Func toolz()    'Set your own name...
timevw% := View();
ToolbarClear();     'Remove any old buttons
ToolbarSet(0, "", idlefun%);   'Idle routine
ToolbarSet(1, "&PredictPCA", PredictPCA%);   'Link to function
ToolbarSet(2, "INTH",MyINTH%);
ToolbarSet(4, "Quit",quit%);
return Toolbar("Things you can do", 511);
end;

Func idlefun%()   'Button 0 routine
'Your code in here...
return 1;  'This leaves toolbar active
end;

Func PredictPCA%()   'Button 1 routine
wvmrkch% := ChanChoose();
wcnt% := View(timevw%).countwaves(wvmrkch%); 'count spikes;
samps% := View(timevw%).getWavemarkInfo(wvmrkch%,1); 'How many samples per spike?
var data[wcnt%][samps%]; getwaves(wvmrkch%,data[][]);
var scores[wcnt%][samps%], variances[samps%],components[samps%][samps%];
ArrConst(scores[][],data[][]);
PCA(0,scores[][],variances[],components[][]);
return 0;  'This stops the toolbar
end;

func ChanChoose()
var wavesch%,ok%;
DlgCreate("Channel Selection");  'Start new dialog
DlgChan(1,"Please indicate WaveMark channel",131088);
DlgButton(0,"Cancel");
DlgButton(1,"OK");
ok% := DlgShow(wavesch%);    'ok% is 0 if user cancels,  variables updated if not
if ChanKind(wavesch%) = 6 then 'if ch% is a wavemark
    PrintLog("You have selected channel ", wavesch%, " for analysis.\n");
    return wavesch%;
else
    PrintLog("Unsuitable channel!\n");
    halt;
endif;

end

func NormTst(data[])
var p, mu, std;
ArrSum(data[],mu,std);

return p;
end

func MyINTH%()
View(timevw%);
wvmrkch% := ChanChoose();

var binsz := 0.0005;
var binco% := 200;

myinthvw% := FileNew(12,0);
var x[binco%],y[binco%];
ArrConst(x[],binsz*1000); ArrIntgl(x[]);

View(timevw%);
var codescnt%;
codescnt% := View(timevw%).getWavemarkInfo(wvmrkch%,2);
var i%, inthch%;
var newname$;
'var offset;
for i%:= 0 to codescnt% do
    View(timevw%);
    MarkMask(wvmrkch%,0,0,-1);
    MarkMask(wvmrkch%,0,1,i%);
    SetINTH(wvmrkch%, binco%, binsz);
    Process(0,View(timevw%).MaxTime(),0,1);
    tempinthvw% := View();
    ArrConst(y,View(tempinthvw%,1).[]);
    View(tempinthvw%); FileClose(0,-1);
    View(myinthvw%);
    
    if i% = 0 then
        inthch% := 1;
        XYSetChan(1,binco%,0,5);
    else
        inthch% := XYSetChan(0,binco%,0,5);
    endif;
   
    XYAddData(inthch%,x[],y[]);
    'XYOffset(inthch%,0,offset);
    ChanColourSet(inthch%,2,Rand(),Rand(),Rand());
    newname$ := "Cluster "+Str$(i%);
    ChanTitle$(inthch%,newname$);
    ChanShow(inthch%,0);
    'offset += 1.1*y[Max(y[])];
next;
ChanShow(2,1);
XYKey(1,1); 'Show legend
XYKey(4,80); 'Move legend to the right 80% of x range
XYKey(5,10);
Xunits$("ms");
View(timevw%).MarkMask(wvmrkch%,0,1,-1);
WindowVisible(1);
return 1;
end

func quit%()
return 0
end