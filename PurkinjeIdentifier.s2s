#include "tool_fun.s2s"

var tsz := 0.0075; ' interval of time after spike to look at
var t := -1;
timevw% := View();
var ssz := View(timevw%).Floor(tsz/Binsize(1)); 'how many samples is tsz
var fsz% := Pow(2,findpwof2(ssz)); 'how many samples in the fft
var asz% := fsz%/2+1; 'number of samples corresponding to amplitude of fft

var sigchan% := 10; 'Where is the signal?
var ccode% := 31; 'code for complex spike
var ssclus%; 'code for simple spikes
var tailchan%; 'channel to hold the tsz long waveform after each simple spike
var cschan%; 'channel to hold isolated complex spikes for inspection

var wavw% := SetResult(1,ssz,1,0,"Waveform", "samples", "V", "","",0);
ChanTitle$(1,"Waveform"); 'window to see the current post spike period
DrawMode(1,13);
var fftvw% := SetResult(1,asz%,1,0,"FFT", "1/samples", "V", "","",0);
ChanTitle$(1,"Amplitude of FFT"); 'window to see the current post spike fft
DrawMode(1,1);
View(timevw%);

if not(CursorExists(1)) then
    CursorNew(0,1);
endif;

if not(CursorExists(2)) then
    CursorNew(0,2);
endif;

main();
halt;

func main()
wvmrkch% := WvmrkChoose();    
    DlgCreate("Init");  'Start new dialog 
    DlgChan(1,"Signal:",513);
    DlgInteger(2,"Simple Spikes:",0,3000);
    DlgButton(0,"Cancel");
    DlgButton(1,"OK");
    var ok% := DlgShow(sigchan%,ssclus%);    'ok% is 0 if user cancels,  variables updated if not
ccode% := ssclus% + 30;
MarkMask(wvmrkch%,0,0,-1); 'hide all spikes
MarkMask(wvmrkch%,0,1,ssclus%); ' show ss
MarkMask(wvmrkch%,0,1,ccode%); ' show cs
wcnt% := View(timevw%).countwaves(wvmrkch%); 'count spikes;
samps% := View(timevw%).getWavemarkInfo(wvmrkch%,1); 'How many samples per spike?

View(wavw%).WindowVisible(1);
View(fftvw%).WindowVisible(1);
ToolbarClear();     'Remove any old buttons
ToolbarSet(0, "", dummy%);   'Idle routine
ToolbarSet(1, "Next|0x21", nex%);   'Link to function
ToolbarSet(2, "Prev|0x22", previ%);   'Link to function
ToolbarSet(3,"Go to Time...", gototime%);
ToolbarSet(5, "Mark as C|0x24", markasc%);
ToolbarSet(6, "Mark as S|0x23", markass%);
ToolbarSet(8, "FFT Find", autopurk%);
ToolbarSet(10, "Clear CS tails", cleartails%);
ToolbarSet(12, "Copy tails 2 spikes", copytails%);
ToolbarSet(13, "Get tails", gettails%);
ToolbarSet(15,"Copy CS 2 spikes",copycs%);
ToolbarSet(16, "Get CS",getcs%);
ToolbarSet(18, "Quit", quit%);
return Toolbar("Let's find a Purkinje cell", 511);
MarkMask(wvmrkch%,0,1,-1);
end

proc drawfft(t,code%[],wvfrm[],cur[],fft[],update%);
if t <> -1 then
    
    View(timevw%).ChanData(sigchan%,cur[],t+samps%*BinSize(1),MaxTime());

    ArrConst(View(wavw%,1).[],cur[]); 'copy waveform to chan 1 of result view
    
    var savecur[ssz]; ArrConst(savecur[],cur[]);
    
    ArrFFT(savecur[],5); 'take power spectrum of fft of spike

    ArrConst(fft[],savecur[]); 'save first half of fft vector (amplitude information)

    fft[0] := 0;
    ArrConst(View(fftvw%,1).[],fft[]);   'display amplitude of fft
    if update% then
        
        View(fftvw%).Optimise(-1);
        View(wavw%).Optimise(-1);
            
        View(timevw%).Draw(t, 3*tsz);
        Cursor(1,(t+View(timevw%).BinSize(1)*samps%));
        Cursor(2,(t+View(timevw%).BinSize(1)*samps%+tsz));
        
    endif;
    
endif;
end

func nex%()
var code%[4],wvfrm[samps%];
var cur[ssz];
var fft[asz%]; 
View(timevw%);
t := NextTime(wvmrkch%,t,code%,wvfrm[]);
drawfft(t,code%[],wvfrm[],cur[],fft[],1);

return 1;
end

func previ%()
var code%[4],wvfrm[samps%];
var cur[ssz];
var fft[asz%]; 
View(timevw%); 

t := LastTime(wvmrkch%,t,code%,wvfrm[]);
drawfft(t,code%[],wvfrm[],cur[],fft[],1);

return 1;
end

func autopurk%()

View(fftvw%).WindowVisible(0);
View(wavw%).WindowVisible(0);

MatLabOpen(1); 'Open a connection to Matlab

var code%[4],wvfrm[samps%];
var cur[ssz];

t := -1;

var ok% := MatLabEval("clear; clc;");

View(timevw%);
var tmphold% := MemChan(7,ssz); 'make a RealMark channel

var i%;
for i% := 1 to wcnt% do
    t := NextTime(wvmrkch%,t,code%,wvfrm[]); 'get the spike
    View(timevw%).ChanData(1,cur[],t+samps%*BinSize(1),MaxTime());
    MemSetItem(tmphold%,0,t,code%,cur[]);        
next;

ExportChanList(0, MaxTime(),tmphold%);
FileSaveAs(ssdir$+"spike2temp\\postss.mat",100,1,"",0,"UseSName=1|UseCName=0|WaveTimes=0|BinFreq=0|BinTimes=0|WaveData=2|MarkAs=1|TMarkAs=2|RMarkAs=2|RMarkData=2|WaveMarkAs=2|WaveMarkData=2|Compatability=0");

var temppath$ := FilePath$(0);
FilePathSet(ssdir$+"spike2temp\\",0);

ok% := MatLabPut("directory",ssdir$);
ok% := MatLabPut("timelength",View(timevw%).MaxTime());
ok% := MatLabPut("ssclus",ssclus%);
ok% := MatLabPut("tsamp",View(timevw%).Binsize(1));
MatLabShow(1);
MatLabEval("PurkinjeIdentifier;");
var newlabels[wcnt%];
ok% := MatLabGet("mynewlabels",newlabels[]);
   
t := -1;    'Apply new labels
for i% := 1 to Len(newlabels[]) do
    t := NextTime(wvmrkch%,t,code%,wvfrm[]);
    MarkSet(wvmrkch%,t-Binsize(1),t+Binsize(1), newlabels[i%-1],-1,-1,-1);
next;

t := -1;    'Delete double counting of close spikes
var nextt;

MarkMask(wvmrkch%,0,0,-1);
MarkMask(wvmrkch%,0,1,ccode%);

repeat 'if two complex spikes are real close, mark the first one as simple
    t := NextTime(wvmrkch%,t,code%,wvfrm[]);
    nextt := NextTime(wvmrkch%,t,code%,wvfrm[]);
    if nextt-t < tsz then
        MarkSet(wvmrkch%,t-Binsize(1),t+Binsize(1), ssclus%,-1,-1,-1);
    endif;
until t = -1;

MarkMask(wvmrkch%,0,0,-1);
MarkMask(wvmrkch%,0,1,ccode%);
t:= -1;

repeat 'if a complex spike has a simple spike in its tail, mark the ss as zero
    t := NextTime(wvmrkch%,t,code%,wvfrm[]);
    MarkMask(wvmrkch%,0,1,ssclus%);
    nextt := NextTime(wvmrkch%,t,code%,wvfrm[]);
    if nextt-t < tsz then
        MarkSet(wvmrkch%,nextt-Binsize(1),nextt+Binsize(1), 0,-1,-1,-1);
    endif;
    MarkMask(wvmrkch%,0,0,ssclus%);
until t = -1;
             
MatLabClose();
ChanDelete(tmphold%);
MarkMask(wvmrkch%,0,0,-1);
MarkMask(wvmrkch%,0,1,ssclus%);
MarkMask(wvmrkch%,0,1,ccode%);
return 1
end

func cleartails%()

var ok%,ssc%,ccc%,tl;
DlgCreate("Clean Tails");
DlgInteger(1,"Simple Spike Cluster:",0,64);
DlgInteger(2,"Complex Spike Cluster:",0,64);
DlgReal(3,"Tail length (ms):",0,100);
DlgButton(0,"Cancel");
DlgButton(1,"OK");
ok% := DlgShow(ssc%,ccc%,tl);

MarkMask(wvmrkch%,0,0,-1);
MarkMask(wvmrkch%,0,1,ccc%);
t:= -1;

var code%[4],wvfrm[samps%];

repeat 'if a complex spike has a simple spike in its tail, mark the ss as zero
    t := NextTime(wvmrkch%,t,code%,wvfrm[]);
    MarkMask(wvmrkch%,0,1,ssc%);
    MarkSet(wvmrkch%,t+Binsize(1),t+tl/1000, 0,-1,-1,-1);
    MarkMask(wvmrkch%,0,0,ssc%);
until t = -1;

return 1
end

func gettails%()

MarkMask(wvmrkch%,0,0,-1);
MarkMask(wvmrkch%,0,1,ssclus%);
MarkMask(wvmrkch%,0,1,ccode%);

View(fftvw%).WindowVisible(0);
View(wavw%).WindowVisible(0);

var code%[4],wvfrm[samps%];
var cur[ssz];

var res := 64; 'downsample to this many data points
var n := floor(ssz/64); 'keep every n points
var downcur[res];
var j,k;

t := -1;

View(timevw%);
tailchan% := MemChan(6,res,n*BinSize(wvmrkch%),res/2);

var i%;
repeat
    t := NextTime(wvmrkch%,t,code%[],wvfrm[]);
    View(timevw%).ChanData(sigchan%,cur[],t+samps%*View(timevw%).BinSize(1),MaxTime());
    
    for j := 0 to (res-1) do
        downcur[j] := cur[k];
        k += n;
    next;
    k := 0;
    if t <> -1 then
        MemSetItem(tailchan%,0,t,code%[],downcur[]);
    endif;
    
until t = -1;
ChanShow(tailchan%);
return 1
end

func copytails%()
View(timevw%);
if tailchan% <> 0 then
var code%[4],wvfrm[samps%];
t := -1;

repeat
    t := NextTime(tailchan%,t,code%[],wvfrm[]);
        if t <> -1 then
            MarkSet(wvmrkch%,t-BinSize(1),t+BinSize(1),code%[]);
        endif;        
until t = -1;
endif;
return 1
end

func getcs%()

var ok%,ssc%,csc%;
DlgCreate("Isolate CS");
DlgInteger(1,"Simple Spike Cluster:",0,64);
DlgInteger(2,"Complex Spike Cluster:",0,64);
DlgButton(0,"Cancel");
DlgButton(1,"OK");
ok% := DlgShow(ssc%,csc%);
View(timevw%);
MarkMask(wvmrkch%,0,0,-1);
MarkMask(wvmrkch%,0,1,csc%);

View(fftvw%).WindowVisible(0);
View(wavw%).WindowVisible(0);

var code%[4],wvfrm[samps%], pre%;
var extsz := ssz+MarkInfo(wvmrkch%,pre%);
var cur[extsz];
var j,k;

t := -1;

View(timevw%);
cschan% := MemChan(6,extsz,BinSize(wvmrkch%),pre%);

var i%;
repeat
    
    t := NextTime(wvmrkch%,t,code%[],wvfrm[]);
    View(timevw%).ChanData(sigchan%,cur[],t,MaxTime());
    if t <> -1 then
        MemSetItem(cschan%,0,t,code%[],cur[]);
    endif;
    
until t = -1;

MarkMask(wvmrkch%,0,1,ssclus%);
MarkMask(wvmrkch%,0,1,ccode%);
ChanShow(cschan%);
return 1
end

func copycs%()
View(timevw%);
if cschan% <> 0 then
var code%[4],wvfrm[samps%];
t := -1;

repeat
        t := NextTime(cschan%,t,code%[],wvfrm[]);
        if t <> -1 then
            MarkSet(wvmrkch%,t-BinSize(1),t+BinSize(1),code%[]);
        endif;
        
until t = -1;
endif;
return 1
end

func gototime%()

var code%[4],wvfrm[samps%];
var cur[ssz];
var fft[asz%];

var newt% := IntChoose("Purkinje Finder","Go to time...",MaxTime());
t := NextTime(wvmrkch%,newt%,code%,wvfrm[]);
drawfft(t,code%[],wvfrm[],cur[],fft[],1);

return 1
end

func dummy%()
return 1
end

func markasc%()
View(timevw%);
MarkSet(wvmrkch%,t-Binsize(1),t+Binsize(1), ccode%,-1,-1,-1);
Draw(t, 3*tsz);
return 1
end

func markass%()
View(timevw%);
MarkSet(wvmrkch%,t-Binsize(1),t+Binsize(1), ssclus%,-1,-1,-1);
Draw(t, 3*tsz);
return 1
end