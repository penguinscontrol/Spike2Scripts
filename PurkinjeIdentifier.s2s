#include "tool_fun.s2s"

var tsz := 0.005;
var t := -1;
timevw% := View();
var ssz := View(timevw%).Floor(tsz/Binsize(1));
var fsz% := Pow(2,findpwof2(ssz));
var asz% := fsz%/2+1; 'number of samples corresponding to amplitude of fft

var ccode% := 31; 'code for complex spike
var ssclus%; 'code for simple spikes

var wavw% := SetResult(1,ssz,1,0,"Waveform", "samples", "V", "","",0);
ChanTitle$(1,"Waveform");
DrawMode(1,13);
var fftvw% := SetResult(1,asz%,1,0,"FFT", "1/samples", "V", "","",0);
ChanTitle$(1,"Amplitude of FFT");
DrawMode(1,1);
View(timevw%);

if not(CursorExists(1)) then
    CursorNew(0,1);
endif;

if not(CursorExists(2)) then
    CursorNew(0,2);
endif;

main();
halt();

func main()
wvmrkch% := WvmrkChoose();
ssclus% := IntChoose("Purkinje Finder","Please select a simple spike cluster");
MarkMask(wvmrkch%,0,0,-1);
MarkMask(wvmrkch%,0,1,ssclus%);
MarkMask(wvmrkch%,0,1,ccode%);
wcnt% := View(timevw%).countwaves(wvmrkch%); 'count spikes;
samps% := View(timevw%).getWavemarkInfo(wvmrkch%,1); 'How many samples per spike?

View(wavw%).WindowVisible(1);
View(fftvw%).WindowVisible(1);
ToolbarClear();     'Remove any old buttons
ToolbarSet(0, "", dummy%);   'Idle routine
ToolbarSet(1, "Next|0x21", nex%);   'Link to function
ToolbarSet(2, "Prev|0x22", previ%);   'Link to function
ToolbarSet(3, "Mark as C|0x24", markasc%);
ToolbarSet(4, "Mark as S|0x23", markass%);
ToolbarSet(5, "Auto Find", autopurk%);
ToolbarSet(6, "Quit", quit%);
return Toolbar("Let's find a Purkinje cell", 511);
MarkMask(wvmrkch%,0,0,-1);
end

proc drawfft(t,code%[],wvfrm[],cur[],fft[],update%);
if t <> -1 then
    
    View(timevw%).ChanData(1,cur[],t+samps%*BinSize(1),MaxTime());

    ArrConst(View(wavw%,1).[],cur[]); 'copy waveform to chan 1 of result view
    
    var savecur[ssz]; ArrConst(savecur[],cur[]);
    
    ArrFFT(savecur[],5); 'take power spectrum of fft of spike

    ArrConst(fft[],savecur[]); 'save first half of fft vector (amplitude information)

    fft[0] := 0;
    ArrConst(View(fftvw%,1).[],fft[]);   'display amplitude of fft
    if update% then
        
        View(fftvw%).Optimise(-1);
        View(wavw%).Optimise(-1);
            
        View(timevw%).Draw(t, 3*tsz);
        Cursor(1,(t+View(timevw%).BinSize(1)*samps%));
        Cursor(2,(t+View(timevw%).BinSize(1)*samps%+tsz));
        
    endif;
    
endif;
end

func nex%()
var code%[4],wvfrm[samps%];
var cur[ssz];
var fft[asz%]; 

t := NextTime(wvmrkch%,t,code%,wvfrm[]);
drawfft(t,code%[],wvfrm[],cur[],fft[],1);

return 1;
end

func previ%()
var code%[4],wvfrm[samps%];
var cur[ssz];
var fft[asz%]; 

t := LastTime(wvmrkch%,t,code%,wvfrm[]);
drawfft(t,code%[],wvfrm[],cur[],fft[],1);

return 1;
end

func autopurk%()

View(fftvw%).WindowVisible(0);
View(wavw%).WindowVisible(0);

MatLabOpen(1); 'Open a connection to Matlab

var code%[4],wvfrm[samps%];
var cur[ssz];
var fft[asz%]; 

t := -1;

MatLabEval("clear;");
MatLabShow(1);

View(timevw%);
var tmphold% := MemChan(7,ssz);

var i%;
for i% := 1 to wcnt% do
    t := NextTime(wvmrkch%,t,code%,wvfrm[]);
    View(timevw%).ChanData(1,cur[],t+samps%*BinSize(1),MaxTime());
    MemSetItem(tmphold%,0,t,code%,cur[]);        
next;

ExportChanList(0, MaxTime(),tmphold%);
FileSaveAs("E:\\Spike_Sorting\\spike2temp\\postss.mat",100,0,"",0,"UseSName=1|UseCName=0|WaveTimes=0|BinFreq=0|BinTimes=0|WaveData=2|MarkAs=1|TMarkAs=2|RMarkAs=2|RMarkData=2|WaveMarkAs=2|WaveMarkData=2|Compatability=0");

var temppath$ := FilePath$(0);
FilePathSet("E:\\Spike_Sorting\\spike2temp\\",0);

MatLabEval("PurkinjeIdentifier;");
var newlabels[wcnt%];
MatLabGet("newlabels",newlabels[]);

MatLabClose();
ChanDelete(tmphold%);
return 1
end

func dummy%()
return 1
end

func markasc%()
View(timevw%);
MarkSet(wvmrkch%,t-Binsize(1),t+Binsize(1), ccode%,-1,-1,-1);
Draw(t, 3*tsz);
return 1
end

func markass%()
View(timevw%);
MarkSet(wvmrkch%,t-Binsize(1),t+Binsize(1), ssclus%,-1,-1,-1);
Draw(t, 3*tsz);
return 1
end

func findpwof2(in)
var n%;
while in >1 do
    in := in/2;
    n% += 1;
wend
return n%-1;

end

func IntChoose(title$,msg$)
var ok%,int0%;
DlgCreate(title$);
DlgInteger(1,msg$,0,64);
DlgButton(0,"Cancel");
DlgButton(1,"OK");
ok% := DlgShow(int0%);
return int0%
end