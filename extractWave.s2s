#include "spike_manipulation_fnc.s2s"
#include "noise_estimate_fcn.s2s"

var newmark%; 'view for the new wavemark
var filtered%; 'Channel for filtered voltage trace

var thres; 'Default spike detection threshold, waveclus style
var stdmin := 3; var stdmax := 10; 'multipliers for wave_clus noise estimate

var sr := 40000; 'Sampling rate

main();
halt;

proc main()

FilePathSet(ssdir$,0);

timevw% := FileOpen("",0,3); 'Open a file for processing
WindowVisible(3);

'Filter the raw signal
filtered% := filterraw(1);          '... save a filtered version of channel 1 to it.
thres := View(timevw%).getnoise(filtered%);
newmark% := View(timevw%).openwavem(filtered%,thres,stdmin,stdmax); 'Open a new wavemark dialogue

Interact("Press OK to get SNR estimate",4607);

var dummych%, dummychvec%[2]; 'convoluted method to extract higest numbered wavemark, assuming it's the one you just created.
if View(timevw%).ChanList(dummychvec%, 16) > 0 then 'If wavemarks exist
    dummych% := View(ViewLink()).ChanList(dummychvec%, 16)+1;                 'get their number and then
endif;                                          
var dummychreal%[dummych%];                                                 'make a vector to hold all of them
if View(timevw%).ChanList(dummychreal%, 16) > 0 then 'If wavemarks exist
    dummychreal%[0] := 0;                 'discard first entry
    wvmrkch% := dummychreal%[Max(dummychreal%)];                  'get latest wavemark
endif;

wcnt% := View(timevw%).countwaves(wvmrkch%); 'count spikes;

'samps% := View(timevw%).getWavemarkInfo(wvmrkch%,1); 'How many samples per spike?
'var data[wcnt%][samps%], times[wcnt%]; 'save spikes here;
'View(timevw%).getwaves(wvmrkch%,data[][]);
'var amps[wcnt%], sig,ampstd;
'View(timevw%).extractFeatMat(amps[],data[][],1);

var amps[wcnt%], sig, ampstd; 'save amplitudes to variable amps
View(timevw%).extractFeatWave(wvmrkch%,amps[],1);
ArrSum(amps[],sig,ampstd);
Message("SNR is ", sig/thres);
end
